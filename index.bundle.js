(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,':root {\n    --pip-green: #31b270;\n    --pip-darkened: #175a32;\n    --pip-more-darker: #0d3521;\n    --background-color: #01160a;\n    --overdue-dark: rgb(65, 22, 22);\n    --overdue-light: rgb(168, 38, 38);\n}\n\nhtml {\n    font-family: sans-serif;\n    font-size: 20px;\n}\n\nbody, html {\n    height: 100%;\n}\n\n* {\n    padding: 0;\n    margin: 0;\n}\n\nbutton, input, label {\n    box-sizing:content-box;\n    border: none;\n    background-color: inherit;\n    font-family: inherit;\n    font-size: inherit;\n    color: inherit;\n\n    cursor: pointer;\n    display: block;\n}\n\ninput:invalid {\n    box-shadow: 0 0 0 2px red;\n}\n\nbutton:active, input:active, label:active{\n    cursor: default;\n}\n\n:where(textarea),\n:where(input[type="text"], input[type="search"], input[type="password"], input[type="url"]){\n  appearance: none;\n  border-style: solid;\n  outline: none;\n} \n\ninput::placeholder {\n    color: var(--pip-darkened);\n    color-scheme: var(--pip-darkened);\n}\n\n.hidden {\n    display: none;\n}\n\n/* Actual styling */\nhtml {\n    background-color: var(--background-color);\n}\nmain {\n    background-color: var(--background-color);\n    color: var(--pip-green);\n\n    box-sizing: border-box;\n    height: 100%;\n    padding: 30px 15px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n/* Top bar stuff */\n.top-bar {\n    display: flex;\n    gap: 15px;\n    height: 45px;\n\n}\n.title-holder {\n    border-top: var(--pip-green) 2px solid;\n    border-right: var(--pip-green) 2px solid;\n    border-left: var(--pip-green) 2px solid;\n    border-image: linear-gradient(to bottom, var(--pip-green), var(--background-color)) 1;\n\n    flex: 5;\n}\n.title {\n    background-color: var(--background-color);\n    position: relative;\n    top: -0.7rem;\n\n    box-sizing: border-box;\n    margin-left: 5%;\n    padding: 0 20px;\n    text-align: center;\n    text-transform: uppercase;\n    letter-spacing: 4px;\n\n    display: inline-block;\n    font-size: 1.2rem;\n    font-weight: inherit;\n}\n\n.date {\n    border-top: var(--pip-green) 2px solid;\n    border-right: var(--pip-green) 2px solid;\n    border-image: linear-gradient(to bottom, var(--pip-green), var(--background-color)) 1;\n    \n    flex: 1;\n    display: flex;\n    justify-content: right;\n\n    padding: 10px;\n}\n\n/* Bottom bar stuff */ \n.low-bar {\n    border-bottom: var(--pip-green) 2px solid;\n    border-right: var(--pip-green) 2px solid;\n    border-left: var(--pip-green) 2px solid;\n\n    border-image: linear-gradient(to top, var(--pip-green), var(--background-color)) 1;\n    \n\n    padding: 10px;\n    height: 45px;\n    box-sizing: border-box;\n}\n\nnav {\n    display: flex;\n    justify-content: space-around; \n\n    position: relative;\n    bottom: -0.8rem;\n}\n\nnav button {\n    padding: 0.2rem 1rem;\n    box-sizing: border-box;\n    background-color: var(--background-color);\n    text-align: center;\n\n    border: 2px solid transparent;\n}\n\nnav button:hover {\n    border-color: var(--pip-green);\n}\n\nnav button.selected {\n    border-color: var(--pip-green);\n    background-color: var(--pip-more-darker);\n}\n\n\n/* Content */\n.content {\n    flex: 1; \n\n    display: grid; /*Nested scrollers didn\'t like display grid*/\n    grid-template-columns: 5fr 6fr;\n    gap: 10%;\n\n    overflow-y: hidden;\n\n}\n\n.content button {\n    border: 2px solid transparent;\n}\n\n.content button:hover {\n    border-color: var(--pip-green);\n}\n\nsection.left {\n    overflow-y: hidden;\n\n    display: flex; /*Needs display flex or grid to have nested scrollers to work properly*/\n    flex-direction: column;\n}\n\nsection.left .quest-container {\n    direction: rtl;\n    height: 100%;\n    padding-left: 5%;\n\n    overflow-y: auto;\n}\n.quest-container * {\n    direction: ltr;\n}\n\n/* Quest prompt */\n.quest-prompt {\n    margin-bottom: 20px;\n    position: relative;\n\n    box-sizing: border-box;\n\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    height: 0%;\n    width: 0%;\n    margin-bottom: 0;\n    transition: width 0.3s, height 0.6s, margin-bottom 0.3s;\n}\n\n.quest-prompt.activated {\n    height: 200px;\n    width: 100%;\n    margin-bottom: 20px;\n}\n\n.quest-prompt-top {\n    border-top: var(--pip-green) 2px solid;\n    border-right: var(--pip-green) 2px solid;\n    border-left: var(--pip-green) 2px solid;\n    border-image: linear-gradient(to bottom, var(--pip-green), var(--background-color)) 1;\n\n    height: 20px;\n}\n\n.quest-prompt-low {\n    border-bottom: var(--pip-green) 2px solid;\n    border-right: var(--pip-green) 2px solid;\n    border-left: var(--pip-green) 2px solid;\n    border-image: linear-gradient(to top, var(--pip-green), var(--background-color)) 1;\n\n    height: 20px;\n}\n\n.quest-prompt-body {\n    padding: 30px;\n\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    gap: 20px;\n}\n\n@media (max-width: 1279px) {\n    .quest-prompt-body {\n        padding: 5px 30px;\n    }\n}\n\n.quest-prompt-body label, .get-quest-name {\n    display: inline-block;\n    margin-right: 15px;\n}\n\n#submit-quest {\n    position: absolute;    \n    right: 10px;\n    bottom: 10px;\n\n    padding: 4px 6px;\n}\n\n.get-quest-due {\n    display: inline;\n}\n\n.due-container {\n    display: inline-flex;\n    flex-flow: row wrap;\n    gap: 4px;\n    margin-right: 16px;\n}\n\n.due-container.invalid .due-day-getter{\n    box-shadow: 0 0 0 2px red;\n}\n\n.due-container .due-day-getter {\n    border: 2px solid var(--pip-darkened);\n    color: var(--pip-darkened);\n    font-family: monospace;\n    font-size: 0.8rem;\n    padding: 0.2rem;\n}\n\n.due-container .due-day-getter.selected {\n    background-color: var(--pip-green);\n    border-color: var(--pip-green);\n    color: var(--background-color);\n}\n\n.due-container .due-day-getter.selected:hover {\n    color: var(--background-color);\n}\n\n.due-container .due-day-getter:hover {\n    color: var(--pip-green);\n}\n\n.due-container .due-day-getter:active {\n    border-color: var(--pip-darkened);\n    color: var(--pip-darkened);\n}\n/*...*/\n\n/* quests display */ \nsection.left ul.quests {\n    list-style: none;\n}\n\n\nsection.left ul.quests li {\n    position: relative;\n    display: grid;\n    grid-template-columns: 1fr auto auto;\n\n    border: 2px solid transparent;\n}\n\nsection.left ul.quests li.hidden {\n    display: none;\n}\n\n\nsection.left ul.quests li:hover {\n    border-color: var(--pip-green);\n}\n\nsection.left ul.quests li .quest-select {\n    width: 100%;\n    padding: 10px 45px;\n    box-sizing: border-box;\n    text-align: left;\n    cursor: pointer;\n\n    border: 0;\n}\n\nsection.left ul.quests li .quest-select:hover {\n    border: 0;\n}\n\nsection.left ul.quests.completed .quest-select {\n    color: var(--pip-darkened);\n}\n\nsection.left ul.quests li .selected::before {\n    content: "";\n    position: absolute;\n    width: 10px;\n    height: 10px;\n\n    top: 35%;\n    left: 20px;\n\n    border: 2px solid var(--pip-green);\n    background-color: var(--pip-green);\n\n}\n\nsection.left ul.completed.quests li .selected::before {\n    border-color: var(--pip-darkened);\n    background-color: var(--pip-darkened);\n}\n\nul.quests li button.due {\n    font-size: 0.8rem;\n    padding: 0;\n\n    align-self: center;\n\n    color: var(--pip-darkened);\n}\n\nul.quests li button.due:hover {\n    background-color: var(--pip-green);\n    color: var(--background-color);\n}\n\nul.quests li button.due.overdue {\n    color: var(--overdue-light);\n}\nul.quests li button.due.overdue:hover {\n    background-color: var(--overdue-light);\n    border-color: var(--overdue-light);\n    color: var(--overdue-dark);\n}\n\nbutton.more {\n    width: 1em;\n    padding: 0 1em;\n    align-self: center;\n    justify-self: center;\n\n    position: relative;\n}\n\n.more-options {\n    position: absolute;\n    bottom: -3em;\n    left: -50px;\n\n    border: 2px solid  var(--pip-green);\n    background-color: var(--background-color);\n\n    z-index: 1; /* Prevents overlap with li elements */\n\n    display: flex;\n    flex-direction: column;\n}\n\n.more-options.hidden {\n    display: none;\n}\n\ndiv.more-options > button {\n    padding: 2px 5px;\n    border: 1px solid transparent;\n}\n\ndiv.more-options > button:hover {\n    border: 1px solid var(--pip-green);\n}\n\nli button.more:hover { /* button.more styling is reused for use in task lists */\n    border-color: transparent;\n}\n\nbutton.more svg {\n    color: var(--pip-darkened);\n}\n\nbutton.more:hover svg {\n    color: var(--pip-green);\n}\n\n.name-editor { /*will have padding when not in editor-holder*/\n    padding: 10px 45px;\n    border: 2px solid var(--pip-darkened);\n    width: 100%;\n    box-sizing: border-box;\n}\n\n.editor-holder {\n    padding: 10px 45px;\n    border: 2px solid var(--pip-darkened);\n    position: relative;\n}\n.editor-holder .name-editor {\n    padding: 0px 0px;\n    width: auto;\n    padding-bottom: 10px;\n    border: 2px solid transparent;\n}\n\n.editor-holder .get-quest-due, .editor-holder .due-container {\n   /* width: 60px;  */\n   font-size: 0.7rem;\n}\n\n.edit-submitter {\n    position: absolute;\n    top: 10px;\n    right: 20px;\n    font-size: 0.7rem;\n}\n\n\n.quest-adder {\n    position: absolute; /*Couldn\'t position this relative to section left because overflow-x visible wouldn\'t work with overflow-y hidden*/\n    top: 70px;\n    right: 53%;\n    width: 1.2em;\n    height: 1.2em;\n\n    background-color: var(--pip-green);\n    color: var(--background-color);\n    font-weight: bold;\n\n    transition: transform 0.3s, color 0.3s;\n}\n\n.quest-adder.selected {\n    transform: rotate(45deg);\n    color: var(--pip-green);\n    border-color: var(--pip-green);\n    background-color: #01160a;\n}\n/* ... */\n\n/* Right section things */ \nsection.right {\n    display: grid;\n    grid-template-rows: min-content 1fr;\n\n    overflow-y: hidden;\n}\n\nsection.right .actions-container {\n    margin: 5% 0;\n    justify-self: right;\n    align-self: center;\n\n    display: flex;\n    flex-direction: column;\n}\n\n\nsection.right .task-adder {\n    padding: 0.2rem 1rem;\n}\n\nsection.right .quest-ender {\n    height: 0;\n    width: 0;\n    padding: 0;\n\n    overflow-y: hidden;\n}\n\nsection.right .quest-ender.activated {\n    padding: 0.2rem 1rem;\n    width: auto;\n    height: auto;\n}\n\nsection.right .tasks-container {\n    overflow-y: auto;\n    padding-right: 5%;\n}\n\nsection.right ul.tasks {\n    list-style: none;\n}\n\nsection.right ul.completed.tasks {\n    color: var(--pip-darkened);\n}\n\nsection.right ul.tasks li label{\n    padding: 10px 45px;\n    position: relative;\n}\n\nsection.right ul.tasks li {\n    border: solid 2px transparent;\n\n    display: grid;\n    grid-template-columns: 1fr auto;\n}\n\nsection.right ul.tasks li.hidden {\n    display: none;\n}\n\nsection.right ul.tasks li:hover {\n    border-color: var(--pip-green);\n}\n\nul.tasks li label input[type=\'checkbox\'] {\n    appearance: none;\n}\n\nul.tasks li label input ~ .checkbox {\n    position: absolute;\n    width: 10px;\n    height: 10px;\n\n    top: 35%;\n    left: 20px;\n\n    border: 2px solid var(--pip-green);\n}\n\nul.completed.tasks li label input ~ .checkbox {\n    border: 2px solid var(--pip-darkened);\n\n}\n\nul.tasks li label input:checked ~ .checkbox {\n    background-color: var(--pip-green);\n}\n\n\nul.completed.tasks li label input:checked ~ .checkbox {\n    background-color: var(--pip-darkened);\n}\n\ninput#create-new-task {\n    padding: 10px 45px;\n    box-sizing: border-box;\n    border: 2px solid transparent;\n    width: 100%;\n    display: block;\n}\n\ninput#create-new-task:focus{\n    border-color: var(--pip-green);\n}\n\nform#task-adder-form {\n    position: relative;\n}\n\nform#task-adder-form button {\n    position: absolute;\n    right: 10px;\n    top: calc(1em / 2);\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root {\n    --pip-green: #31b270;\n    --pip-darkened: #175a32;\n    --pip-more-darker: #0d3521;\n    --background-color: #01160a;\n    --overdue-dark: rgb(65, 22, 22);\n    --overdue-light: rgb(168, 38, 38);\n}\n\nhtml {\n    font-family: sans-serif;\n    font-size: 20px;\n}\n\nbody, html {\n    height: 100%;\n}\n\n* {\n    padding: 0;\n    margin: 0;\n}\n\nbutton, input, label {\n    box-sizing:content-box;\n    border: none;\n    background-color: inherit;\n    font-family: inherit;\n    font-size: inherit;\n    color: inherit;\n\n    cursor: pointer;\n    display: block;\n}\n\ninput:invalid {\n    box-shadow: 0 0 0 2px red;\n}\n\nbutton:active, input:active, label:active{\n    cursor: default;\n}\n\n:where(textarea),\n:where(input[type="text"], input[type="search"], input[type="password"], input[type="url"]){\n  appearance: none;\n  border-style: solid;\n  outline: none;\n} \n\ninput::placeholder {\n    color: var(--pip-darkened);\n    color-scheme: var(--pip-darkened);\n}\n\n.hidden {\n    display: none;\n}\n\n/* Actual styling */\nhtml {\n    background-color: var(--background-color);\n}\nmain {\n    background-color: var(--background-color);\n    color: var(--pip-green);\n\n    box-sizing: border-box;\n    height: 100%;\n    padding: 30px 15px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n/* Top bar stuff */\n.top-bar {\n    display: flex;\n    gap: 15px;\n    height: 45px;\n\n}\n.title-holder {\n    border-top: var(--pip-green) 2px solid;\n    border-right: var(--pip-green) 2px solid;\n    border-left: var(--pip-green) 2px solid;\n    border-image: linear-gradient(to bottom, var(--pip-green), var(--background-color)) 1;\n\n    flex: 5;\n}\n.title {\n    background-color: var(--background-color);\n    position: relative;\n    top: -0.7rem;\n\n    box-sizing: border-box;\n    margin-left: 5%;\n    padding: 0 20px;\n    text-align: center;\n    text-transform: uppercase;\n    letter-spacing: 4px;\n\n    display: inline-block;\n    font-size: 1.2rem;\n    font-weight: inherit;\n}\n\n.date {\n    border-top: var(--pip-green) 2px solid;\n    border-right: var(--pip-green) 2px solid;\n    border-image: linear-gradient(to bottom, var(--pip-green), var(--background-color)) 1;\n    \n    flex: 1;\n    display: flex;\n    justify-content: right;\n\n    padding: 10px;\n}\n\n/* Bottom bar stuff */ \n.low-bar {\n    border-bottom: var(--pip-green) 2px solid;\n    border-right: var(--pip-green) 2px solid;\n    border-left: var(--pip-green) 2px solid;\n\n    border-image: linear-gradient(to top, var(--pip-green), var(--background-color)) 1;\n    \n\n    padding: 10px;\n    height: 45px;\n    box-sizing: border-box;\n}\n\nnav {\n    display: flex;\n    justify-content: space-around; \n\n    position: relative;\n    bottom: -0.8rem;\n}\n\nnav button {\n    padding: 0.2rem 1rem;\n    box-sizing: border-box;\n    background-color: var(--background-color);\n    text-align: center;\n\n    border: 2px solid transparent;\n}\n\nnav button:hover {\n    border-color: var(--pip-green);\n}\n\nnav button.selected {\n    border-color: var(--pip-green);\n    background-color: var(--pip-more-darker);\n}\n\n\n/* Content */\n.content {\n    flex: 1; \n\n    display: grid; /*Nested scrollers didn\'t like display grid*/\n    grid-template-columns: 5fr 6fr;\n    gap: 10%;\n\n    overflow-y: hidden;\n\n}\n\n.content button {\n    border: 2px solid transparent;\n}\n\n.content button:hover {\n    border-color: var(--pip-green);\n}\n\nsection.left {\n    overflow-y: hidden;\n\n    display: flex; /*Needs display flex or grid to have nested scrollers to work properly*/\n    flex-direction: column;\n}\n\nsection.left .quest-container {\n    direction: rtl;\n    height: 100%;\n    padding-left: 5%;\n\n    overflow-y: auto;\n}\n.quest-container * {\n    direction: ltr;\n}\n\n/* Quest prompt */\n.quest-prompt {\n    margin-bottom: 20px;\n    position: relative;\n\n    box-sizing: border-box;\n\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    height: 0%;\n    width: 0%;\n    margin-bottom: 0;\n    transition: width 0.3s, height 0.6s, margin-bottom 0.3s;\n}\n\n.quest-prompt.activated {\n    height: 200px;\n    width: 100%;\n    margin-bottom: 20px;\n}\n\n.quest-prompt-top {\n    border-top: var(--pip-green) 2px solid;\n    border-right: var(--pip-green) 2px solid;\n    border-left: var(--pip-green) 2px solid;\n    border-image: linear-gradient(to bottom, var(--pip-green), var(--background-color)) 1;\n\n    height: 20px;\n}\n\n.quest-prompt-low {\n    border-bottom: var(--pip-green) 2px solid;\n    border-right: var(--pip-green) 2px solid;\n    border-left: var(--pip-green) 2px solid;\n    border-image: linear-gradient(to top, var(--pip-green), var(--background-color)) 1;\n\n    height: 20px;\n}\n\n.quest-prompt-body {\n    padding: 30px;\n\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    gap: 20px;\n}\n\n@media (max-width: 1279px) {\n    .quest-prompt-body {\n        padding: 5px 30px;\n    }\n}\n\n.quest-prompt-body label, .get-quest-name {\n    display: inline-block;\n    margin-right: 15px;\n}\n\n#submit-quest {\n    position: absolute;    \n    right: 10px;\n    bottom: 10px;\n\n    padding: 4px 6px;\n}\n\n.get-quest-due {\n    display: inline;\n}\n\n.due-container {\n    display: inline-flex;\n    flex-flow: row wrap;\n    gap: 4px;\n    margin-right: 16px;\n}\n\n.due-container.invalid .due-day-getter{\n    box-shadow: 0 0 0 2px red;\n}\n\n.due-container .due-day-getter {\n    border: 2px solid var(--pip-darkened);\n    color: var(--pip-darkened);\n    font-family: monospace;\n    font-size: 0.8rem;\n    padding: 0.2rem;\n}\n\n.due-container .due-day-getter.selected {\n    background-color: var(--pip-green);\n    border-color: var(--pip-green);\n    color: var(--background-color);\n}\n\n.due-container .due-day-getter.selected:hover {\n    color: var(--background-color);\n}\n\n.due-container .due-day-getter:hover {\n    color: var(--pip-green);\n}\n\n.due-container .due-day-getter:active {\n    border-color: var(--pip-darkened);\n    color: var(--pip-darkened);\n}\n/*...*/\n\n/* quests display */ \nsection.left ul.quests {\n    list-style: none;\n}\n\n\nsection.left ul.quests li {\n    position: relative;\n    display: grid;\n    grid-template-columns: 1fr auto auto;\n\n    border: 2px solid transparent;\n}\n\nsection.left ul.quests li.hidden {\n    display: none;\n}\n\n\nsection.left ul.quests li:hover {\n    border-color: var(--pip-green);\n}\n\nsection.left ul.quests li .quest-select {\n    width: 100%;\n    padding: 10px 45px;\n    box-sizing: border-box;\n    text-align: left;\n    cursor: pointer;\n\n    border: 0;\n}\n\nsection.left ul.quests li .quest-select:hover {\n    border: 0;\n}\n\nsection.left ul.quests.completed .quest-select {\n    color: var(--pip-darkened);\n}\n\nsection.left ul.quests li .selected::before {\n    content: "";\n    position: absolute;\n    width: 10px;\n    height: 10px;\n\n    top: 35%;\n    left: 20px;\n\n    border: 2px solid var(--pip-green);\n    background-color: var(--pip-green);\n\n}\n\nsection.left ul.completed.quests li .selected::before {\n    border-color: var(--pip-darkened);\n    background-color: var(--pip-darkened);\n}\n\nul.quests li button.due {\n    font-size: 0.8rem;\n    padding: 0;\n\n    align-self: center;\n\n    color: var(--pip-darkened);\n}\n\nul.quests li button.due:hover {\n    background-color: var(--pip-green);\n    color: var(--background-color);\n}\n\nul.quests li button.due.overdue {\n    color: var(--overdue-light);\n}\nul.quests li button.due.overdue:hover {\n    background-color: var(--overdue-light);\n    border-color: var(--overdue-light);\n    color: var(--overdue-dark);\n}\n\nbutton.more {\n    width: 1em;\n    padding: 0 1em;\n    align-self: center;\n    justify-self: center;\n\n    position: relative;\n}\n\n.more-options {\n    position: absolute;\n    bottom: -3em;\n    left: -50px;\n\n    border: 2px solid  var(--pip-green);\n    background-color: var(--background-color);\n\n    z-index: 1; /* Prevents overlap with li elements */\n\n    display: flex;\n    flex-direction: column;\n}\n\n.more-options.hidden {\n    display: none;\n}\n\ndiv.more-options > button {\n    padding: 2px 5px;\n    border: 1px solid transparent;\n}\n\ndiv.more-options > button:hover {\n    border: 1px solid var(--pip-green);\n}\n\nli button.more:hover { /* button.more styling is reused for use in task lists */\n    border-color: transparent;\n}\n\nbutton.more svg {\n    color: var(--pip-darkened);\n}\n\nbutton.more:hover svg {\n    color: var(--pip-green);\n}\n\n.name-editor { /*will have padding when not in editor-holder*/\n    padding: 10px 45px;\n    border: 2px solid var(--pip-darkened);\n    width: 100%;\n    box-sizing: border-box;\n}\n\n.editor-holder {\n    padding: 10px 45px;\n    border: 2px solid var(--pip-darkened);\n    position: relative;\n}\n.editor-holder .name-editor {\n    padding: 0px 0px;\n    width: auto;\n    padding-bottom: 10px;\n    border: 2px solid transparent;\n}\n\n.editor-holder .get-quest-due, .editor-holder .due-container {\n   /* width: 60px;  */\n   font-size: 0.7rem;\n}\n\n.edit-submitter {\n    position: absolute;\n    top: 10px;\n    right: 20px;\n    font-size: 0.7rem;\n}\n\n\n.quest-adder {\n    position: absolute; /*Couldn\'t position this relative to section left because overflow-x visible wouldn\'t work with overflow-y hidden*/\n    top: 70px;\n    right: 53%;\n    width: 1.2em;\n    height: 1.2em;\n\n    background-color: var(--pip-green);\n    color: var(--background-color);\n    font-weight: bold;\n\n    transition: transform 0.3s, color 0.3s;\n}\n\n.quest-adder.selected {\n    transform: rotate(45deg);\n    color: var(--pip-green);\n    border-color: var(--pip-green);\n    background-color: #01160a;\n}\n/* ... */\n\n/* Right section things */ \nsection.right {\n    display: grid;\n    grid-template-rows: min-content 1fr;\n\n    overflow-y: hidden;\n}\n\nsection.right .actions-container {\n    margin: 5% 0;\n    justify-self: right;\n    align-self: center;\n\n    display: flex;\n    flex-direction: column;\n}\n\n\nsection.right .task-adder {\n    padding: 0.2rem 1rem;\n}\n\nsection.right .quest-ender {\n    height: 0;\n    width: 0;\n    padding: 0;\n\n    overflow-y: hidden;\n}\n\nsection.right .quest-ender.activated {\n    padding: 0.2rem 1rem;\n    width: auto;\n    height: auto;\n}\n\nsection.right .tasks-container {\n    overflow-y: auto;\n    padding-right: 5%;\n}\n\nsection.right ul.tasks {\n    list-style: none;\n}\n\nsection.right ul.completed.tasks {\n    color: var(--pip-darkened);\n}\n\nsection.right ul.tasks li label{\n    padding: 10px 45px;\n    position: relative;\n}\n\nsection.right ul.tasks li {\n    border: solid 2px transparent;\n\n    display: grid;\n    grid-template-columns: 1fr auto;\n}\n\nsection.right ul.tasks li.hidden {\n    display: none;\n}\n\nsection.right ul.tasks li:hover {\n    border-color: var(--pip-green);\n}\n\nul.tasks li label input[type=\'checkbox\'] {\n    appearance: none;\n}\n\nul.tasks li label input ~ .checkbox {\n    position: absolute;\n    width: 10px;\n    height: 10px;\n\n    top: 35%;\n    left: 20px;\n\n    border: 2px solid var(--pip-green);\n}\n\nul.completed.tasks li label input ~ .checkbox {\n    border: 2px solid var(--pip-darkened);\n\n}\n\nul.tasks li label input:checked ~ .checkbox {\n    background-color: var(--pip-green);\n}\n\n\nul.completed.tasks li label input:checked ~ .checkbox {\n    background-color: var(--pip-darkened);\n}\n\ninput#create-new-task {\n    padding: 10px 45px;\n    box-sizing: border-box;\n    border: 2px solid transparent;\n    width: 100%;\n    display: block;\n}\n\ninput#create-new-task:focus{\n    border-color: var(--pip-green);\n}\n\nform#task-adder-form {\n    position: relative;\n}\n\nform#task-adder-form button {\n    position: absolute;\n    right: 10px;\n    top: calc(1em / 2);\n}\n'],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var d=e[s],l=r.base?d[0]+r.base:d[0],u=i[l]||0,c="".concat(l," ").concat(u);i[l]=u+1;var A=n(c),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var h=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:c,updater:h,references:1})}a.push(c)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var d=r(e,o),l=0;l<i.length;l++){var u=n(i[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),i=n(569),a=n.n(i),s=n(565),d=n.n(s),l=n(216),u=n.n(l),c=n(589),A=n.n(c),p=n(426),h={};function g(e,t=document){return t.querySelector(e)}function m(e,t){let n=b(0,e);const r=n>-1?n:e.length,o=e.slice(0,r),i=[];let a;for(;n>-1;){const t=b(n+1,e),r=t>-1?t:e.length,o=e.slice(n+1,r);if(0===o.length)throw console.error("Usage error: Tried to use two symbols for class and/or id in a row.");if("."===e.at(n))i.unshift(o);else{if(void 0!==a)throw console.error("Argument error: elements can't have multiple ids");a=o}n=t}const s=document.createElement(o);for(const e of i)s.classList.add(e);return a&&s.setAttribute("id",a),t&&t.append(s),s}function b(e,t){const n=t.indexOf("#",e),r=t.indexOf(".",e);return-1===n?r:-1===r?n:n>r?r:n}function v(e,t){e.parentNode.insertBefore(t,e.nextSibling)}function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function C(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function y(e){C(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===f(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function k(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function B(e){C(1,arguments);var t=y(e),n=t.getUTCDay(),r=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function x(e){C(1,arguments);var t=y(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=B(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var a=B(i);return t.getTime()>=o.getTime()?n+1:t.getTime()>=a.getTime()?n:n-1}h.styleTagTransform=A(),h.setAttributes=d(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=u(),t()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;var I={};function w(){return I}function q(e,t){var n,r,o,i,a,s,d,l;C(1,arguments);var u=w(),c=k(null!==(n=null!==(r=null!==(o=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(a=t.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=y(e),p=A.getUTCDay(),h=(p<c?7:0)+p-c;return A.setUTCDate(A.getUTCDate()-h),A.setUTCHours(0,0,0,0),A}function E(e,t){var n,r,o,i,a,s,d,l;C(1,arguments);var u=y(e),c=u.getUTCFullYear(),A=w(),p=k(null!==(n=null!==(r=null!==(o=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(a=t.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(d=A.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(c+1,0,p),h.setUTCHours(0,0,0,0);var g=q(h,t),m=new Date(0);m.setUTCFullYear(c,0,p),m.setUTCHours(0,0,0,0);var b=q(m,t);return u.getTime()>=g.getTime()?c+1:u.getTime()>=b.getTime()?c:c-1}function D(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const T=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return D("yy"===t?r%100:r,t.length)},Q=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):D(n+1,2)},L=function(e,t){return D(e.getUTCDate(),t.length)},S=function(e,t){return D(e.getUTCHours()%12||12,t.length)},M=function(e,t){return D(e.getUTCHours(),t.length)},P=function(e,t){return D(e.getUTCMinutes(),t.length)},U=function(e,t){return D(e.getUTCSeconds(),t.length)},W=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return D(Math.floor(r*Math.pow(10,n-3)),t.length)};var Y={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return T(e,t)},Y:function(e,t,n,r){var o=E(e,r),i=o>0?o:1-o;return"YY"===t?D(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):D(i,t.length)},R:function(e,t){return D(x(e),t.length)},u:function(e,t){return D(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return D(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return D(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return Q(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return D(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var o=function(e,t){C(1,arguments);var n=y(e),r=q(n,t).getTime()-function(e,t){var n,r,o,i,a,s,d,l;C(1,arguments);var u=w(),c=k(null!==(n=null!==(r=null!==(o=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(a=t.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1),A=E(e,t),p=new Date(0);return p.setUTCFullYear(A,0,c),p.setUTCHours(0,0,0,0),q(p,t)}(n,t).getTime();return Math.round(r/6048e5)+1}(e,r);return"wo"===t?n.ordinalNumber(o,{unit:"week"}):D(o,t.length)},I:function(e,t,n){var r=function(e){C(1,arguments);var t=y(e),n=B(t).getTime()-function(e){C(1,arguments);var t=x(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),B(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):D(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):L(e,t)},D:function(e,t,n){var r=function(e){C(1,arguments);var t=y(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=n-t.getTime();return Math.floor(r/864e5)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):D(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return D(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return D(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return D(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return S(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):M(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):D(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):D(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):P(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):U(e,t)},S:function(e,t){return W(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return G(o);case"XXXX":case"XX":return z(o);default:return z(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return G(o);case"xxxx":case"xx":return z(o);default:return z(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+O(o,":");default:return"GMT"+z(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+O(o,":");default:return"GMT"+z(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return D(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return D((r._originalDate||e).getTime(),t.length)}};function O(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),i=r%60;if(0===i)return n+String(o);var a=t||"";return n+String(o)+a+D(i,2)}function G(e,t){return e%60==0?(e>0?"-":"+")+D(Math.abs(e)/60,2):z(e,t)}function z(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+D(Math.floor(o/60),2)+n+D(o%60,2)}const N=Y;var j=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},F=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const H={p:F,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return j(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",j(o,t)).replace("{{time}}",F(i,t))}};function V(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var X=["D","DD"],R=["YY","YYYY"];function Z(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var J={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function _(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const $={date:_({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:_({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:_({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var K={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ee(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var a=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[s]||e.values[a]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const te={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:ee({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ee({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:ee({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ee({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ee({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ne(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=t.match(o);if(!i)return null;var a,s=i[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(d);return a=e.valueCallback?e.valueCallback(l):l,{value:a=n.valueCallback?n.valueCallback(a):a,rest:t.slice(s.length)}}}var re,oe={ordinalNumber:(re={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(re.matchPattern);if(!n)return null;var r=n[0],o=e.match(re.parsePattern);if(!o)return null;var i=re.valueCallback?re.valueCallback(o[0]):o[0];return{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(r.length)}}),era:ne({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ne({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ne({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ne({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ne({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const ie={code:"en-US",formatDistance:function(e,t,n){var r,o=J[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:$,formatRelative:function(e,t,n,r){return K[e]},localize:te,match:oe,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ae=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,se=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,de=/^'([^]*?)'?$/,le=/''/g,ue=/[a-zA-Z]/;function ce(e,t,n){var r,o,i,a,s,d,l,u,c,A,p,h,g,m,b,v,B,x;C(2,arguments);var I=String(t),q=w(),E=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:q.locale)&&void 0!==r?r:ie,D=k(null!==(i=null!==(a=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(l=n.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:q.firstWeekContainsDate)&&void 0!==a?a:null===(c=q.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=k(null!==(p=null!==(h=null!==(g=null!==(m=null==n?void 0:n.weekStartsOn)&&void 0!==m?m:null==n||null===(b=n.locale)||void 0===b||null===(v=b.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==g?g:q.weekStartsOn)&&void 0!==h?h:null===(B=q.locale)||void 0===B||null===(x=B.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==p?p:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!E.localize)throw new RangeError("locale must contain localize property");if(!E.formatLong)throw new RangeError("locale must contain formatLong property");var Q=y(e);if(!function(e){if(C(1,arguments),!function(e){return C(1,arguments),e instanceof Date||"object"===f(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=y(e);return!isNaN(Number(t))}(Q))throw new RangeError("Invalid time value");var L=function(e,t){return C(2,arguments),function(e,t){C(2,arguments);var n=y(e).getTime(),r=k(t);return new Date(n+r)}(e,-k(t))}(Q,V(Q)),S={firstWeekContainsDate:D,weekStartsOn:T,locale:E,_originalDate:Q};return I.match(se).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,H[t])(e,E.formatLong):e})).join("").match(ae).map((function(r){if("''"===r)return"'";var o,i,a=r[0];if("'"===a)return(i=(o=r).match(de))?i[1].replace(le,"'"):o;var s,d=N[a];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=r,-1===R.indexOf(s))||Z(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==X.indexOf(e)}(r)||Z(r,t,String(e)),d(L,r,E.localize,S);if(a.match(ue))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("")}function Ae(e){C(1,arguments);var t=y(e);return t.setHours(0,0,0,0),t}var pe=864e5;function he(e,t){var n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}function ge(e,t){C(2,arguments);var n=y(e),r=y(t),o=he(n,r),i=Math.abs(function(e,t){C(2,arguments);var n=Ae(e),r=Ae(t),o=n.getTime()-V(n),i=r.getTime()-V(r);return Math.round((o-i)/pe)}(n,r));n.setDate(n.getDate()-o*i);var a=o*(i-Number(he(n,r)===-o));return 0===a?0:a}function me(e){const t=new Date,n=function(e,t){C(2,arguments);var n=y(e),r=y(t),o=n.getTime()-r.getTime();return o<0?-1:o>0?1:o}(e,t);if(n<0){const n=ge(t,e);return-0===n?0:n}return-1*(ge(t,e)+1)}class be{description;isOptional;completionDate=null;constructor(e,t,n=null){this.description=e,this.isOptional=t,this.completionDate=n}get isComplete(){return null!==this.completionDate}complete(){this.completionDate=new Date}resetCompletion(){this.completionDate=null}beenCompleted(){return me(this.completionDate)>2}getFlatCopy(){return{description:this.description,isOptional:this.isOptional,completionDate:this?.completionDate?.getTime()}}}class ve{name;dueDate;completionDate=null;tasks=[];get completedTasks(){const e=[];for(let t=0;t<this.tasks.length;t++){const n=this.tasks[t];null!==n.completionDate&&e.push(n)}return e}get isComplete(){return null!==this.completionDate}get isOverdue(){return this.dueDate<new Date}constructor(e,t=[],n=null,r=null){this.name=e,this.tasks=t,this.dueDate=n,this.completionDate=r}complete(){this.completionDate=new Date}resetCompletion(){this.completionDate=null}resetTasks(){for(let e=0;e<this.tasks.length;e++)null!==this.tasks[e].completionDate&&this.decompleteTask(e)}removeTask(e){this.tasks.splice(e,1)}addTask(e){this.shouldBeComplete()&&this.resetCompletion(),this.tasks.push(e)}moveTask(e,t){const n=this.tasks[e];this.removeTask(e),this.tasks.splice(t,0,n)}completeTask(e){this.tasks[e].trackCompletionDate()}decompleteTask(e){this.tasks[e].resetCompletion()}shouldBeComplete(){return this.tasks.length===this.completedTasks.length}trackCompletionDate(){this.completionDate=new Date}beenCompleted(){return me(this.completionDate)>2}getFlatCopy(){const e=[];for(let t=0;t<this.tasks.length;t++)e[t]=this.tasks[t].getFlatCopy();return{name:this.name,tasks:e,dueDate:this.dueDate?.getTime(),completionDate:this.completionDate?.getTime()}}}class fe{#e=[];get quests(){return this.#e}constructor(e){e&&(this.#e=e)}get quests(){return this.#e}get completedQuests(){const e=[];for(quest of this.#e)null!==quest.completionDate&&e.push(quest);return e}addQuest(e){this.#e.unshift(e)}removeQuest(e){this.#e.splice(e,1)}moveQuest(e,t){const n=this.#e[e];this.removeQuest(e),this.#e.splice(t,0,n)}getQuest(e){return this.#e[e]}completeQuest(e){this.#e[e].complete()}cleanCompleted(){for(let e=0;e<this.completedQuests.length;e++){const t=this.completedQuests[e];if(t.beenCompleted()){const n=this.#e.indexOf(t);this.removeQuest(n),e--}}}}function Ce(e,t){return{hour:e,minute:t}}const ye={Sun:0,Mon:1,Tue:2,Wed:3,Thu:4,Fri:5,Sat:6};function ke(e,t,n){return{day:e,hour:t,minute:n}}class Be extends fe{QGType="stat";makeQuest(e,t,n){const r=new ve(e,t,n);return this.addQuest(r),r}}class xe extends fe{QGType="daily";makeQuest(e,t,n){const r=new Date;r.setHours(n.hour,n.minute,0);const o=new ve(e,t,r);this.addQuest(o)}resetQuests(){for(let e=0;e<this.quests.length;e++){const t=this.getQuest(e),n=t.dueDate,r=new Date;r.setHours(n.getHours(),n.getMinutes(),0),t.dueDate=r,null!==t.completionDate&&(t.resetCompletion(),t.resetTasks())}}}class Ie extends fe{QGType="weekly";makeQuest(e,t,n){const r=new Date,o=r.getDay()-n.day,i=r.getDate()-o;r.setDate(i),r.setHours(n.hour,n.minute,0);const a=new ve(e,t,r);this.addQuest(a)}resetQuests(){for(let e=0;e<this.quests.length;e++){const t=this.getQuest(e),n=t.dueDate,r=new Date,o=r.getDay()-n.getDay(),i=r.getDate()-o;r.setDate(i),r.setHours(n.getHours(),n.getMinutes(),0),t.dueDate=r,null!==t.completionDate&&(t.resetCompletion(),t.resetTasks())}}}function we(e){return ce(e,"hh:mm aa")}function qe(e){let[t,n,r]=e.split("-");return new Date(t,n-1,r,0,0,0)}let Ee=window.localStorage,De=null;function Te(){const e={};for(const[t,n]of Object.entries(De.questGroups)){const r=n,o=[];for(let e=0;e<r.quests.length;e++){const t=r.quests[e].getFlatCopy();o.push(t)}e[t]=o}Ee.setItem("user",JSON.stringify(e)),Ee.setItem("last-save-date",(new Date).getTime())}const Qe={stat:{getDueInput:()=>{const e=m("input.get-quest-due");return e.setAttribute("type","date"),e},getLabelText:()=>"Date: ",getInputVals:()=>{const e=g(".quest-prompt #submit-quest"),t=g(".quest-prompt .get-quest-name"),n=t.value,r=g(".quest-prompt .get-quest-due"),o=Date.parse(qe(r.value))?qe(r.value):null;return n.length>0?(t.setCustomValidity(""),e.setAttribute("type","reset"),[n,o]):(t.setCustomValidity("Quest needs a name!"),e.setAttribute("type","button"),[null,null])},getTimeDisplayText:e=>ce(e.dueDate,"MM.dd.yy"),getDueEditorVals:e=>Date.parse(qe(e.value))?qe(e.value):null},daily:{getDueInput:()=>{const e=m("input.get-quest-due");return e.setAttribute("type","time"),e},getLabelText:()=>"Time: ",getInputVals:()=>{const e=g(".quest-prompt #submit-quest"),t=g(".quest-prompt .get-quest-name"),n=t.value,r=g(".quest-prompt .get-quest-due"),[o,i]=r.value.split(":"),a=Ce(o,i);return n.length>0&&r.value.length>0?(r.setCustomValidity(""),t.setCustomValidity(""),e.setAttribute("type","reset"),[n,a]):(r.value.length<=0&&r.setCustomValidity("Needs a time!"),n.length<=0&&t.setCustomValidity("Quest needs a name!"),e.setAttribute("type","button"),[null,null])},getDueEditorVals:e=>{if(0===e.value.length)return null;const[t,n]=e.value.split(":"),r=Ce(t,n),o=new Date;return o.setHours(r.hour,r.minute,0),o},getTimeDisplayText:e=>we(e.dueDate)},weekly:function(){const e=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],t=(e,t)=>{t.dataset.selectedDay="";const n=m("button.due-day-getter",t);n.textContent=e,n.setAttribute("type","button"),n.dataset.dayId=ye[e],n.addEventListener("click",(()=>{const r=g(".due-day-getter.selected",t);r&&(r.classList.remove("selected"),r.dataset.dayId===n.dataset.dayId)?t.dataset.selectedDay="":(t.dataset.selectedDay=ye[e],n.classList.add("selected"))}))};return{getDueInput:()=>{const e=m("div.due-container");for(const[n,r]of Object.entries(ye))t.call(this,n,e);return m("input.get-quest-due",e).setAttribute("type","time"),e},getLabelText:()=>"Day: ",getInputVals:()=>{const e=g(".quest-prompt #submit-quest"),t=g(".quest-prompt .get-quest-name"),n=t.value,r=g(".quest-prompt .due-container"),o=g(".quest-prompt .get-quest-due[type='time']");let i,a;o.value.length>0?[i,a]=o.value.split(":"):(i=0,a=0);const s=r.dataset.selectedDay,d=ke(s,+i,+a);if(n.length>0&&""!==s&&o.value.length>0){o.setCustomValidity(""),t.setCustomValidity(""),r.classList.remove("invalid"),e.setAttribute("type","reset"),r.dataset.selectedDay="";const i=g(".quest-prompt .due-day-getter.selected");return i&&i.classList.remove("selected"),[n,d]}return o.value.length<=0&&o.setCustomValidity("Quest needs a time"),""===s&&r.classList.add("invalid"),n.length<=0&&t.setCustomValidity("Needs a name!"),e.setAttribute("type","button"),[null,null]},getTimeDisplayText:t=>{const n=t.dueDate;return`${e[n.getDay()]} ${we(n)}`},getDueEditorVals:e=>{const t=g(".get-quest-due[type='time']",e);let[n,r]=t.value.split(":");0===t.value.length&&(n=0,r=0);const o=ke(e.dataset.selectedDay,+n,+r),i=new Date,a=i.getDay()-o.day,s=i.getDate()-a;return i.setDate(s),i.setHours(o.hour,o.minute,0),i}}}()};function Le(){const e="http://www.w3.org/2000/svg",t=document.createElementNS(e,"svg");t.setAttribute("viewBox","0 0 20 20");const n=document.createElementNS(e,"path");return n.setAttribute("d","M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"),n.setAttribute("fill","currentColor"),t.append(n),t}const Se=new Event("quest completion changed");class Me{#t;#n;#r;#o;selectedQuestIndex=0;#i;constructor(e,t,n,r,o){this.#t=e,this.#n=t,this.#r=n,this.#o=r,this.#i=o}clearDisplayedQuests(){this.#n.textContent="",this.#r.textContent=""}#a(e,t){e.removeQuest(t),this.clearDisplayedQuests(),this.selectedQuestIndex=0,this.displayQuests(e)}#s(e,t,n,r,o){e.classList.add("hidden");const i=m("div.editor-holder"),a=m("input.name-editor",i);a.setAttribute("type","text"),a.value=n.name,v(e,i),a.focus();const s=Qe[r].getDueInput();i.append(s);const d=m("button.edit-submitter",i);d.textContent=">>";const l=()=>{n.name=a.value,t.textContent=n.name,e.classList.remove("hidden");const d=Qe[r].getDueEditorVals(s);d&&(n.dueDate=d,o.textContent=Qe[r].getTimeDisplayText(n),n.isOverdue?o.classList.add("overdue"):o.classList.remove("overdue")),Te(),window.removeEventListener("pointerdown",u),i.remove()};d.addEventListener("click",l),a.addEventListener("keydown",(e=>{13===e.keyCode&&l()}));const u=e=>{i.contains(e.target)||l()};window.addEventListener("pointerdown",u)}#d(e){const t=g("div.more-options:not(.hidden)");t&&t!==e&&t.classList.add("hidden"),e.classList.toggle("hidden"),e.focus()}#l(e,t){e.querySelector(".more:hover")||t.classList.add("hidden")}#u(e){const t=g(".selected",this.#t);t&&t.classList.remove("selected"),e.classList.add("selected")}#c(e,t,n){this.#u(t),this.#i.displayTasks(e),this.selectedQuestIndex=n}#A=null;#p(e,t,n){const r=m("li");r.dataset.index=t;const o=m("div.quest-select",r);o.setAttribute("tabIndex",0),o.setAttribute("type","button"),o.textContent=e.name,o.addEventListener("click",this.#c.bind(this,e,o,t));const i=null!=e.dueDate,a=m("button.due");r.append(a),i&&(a.textContent=Qe[n.QGType].getTimeDisplayText(e),e.isOverdue&&a.classList.add("overdue"));const s=m("button.more",r),d=Le();s.append(d);const l=m("div.more-options.hidden",s),u=m("button.delete-option",l);u.textContent="Delete",u.addEventListener("click",this.#a.bind(this,n,t));const c=m("button.edit-name-option",l);return c.textContent="Edit",c.addEventListener("click",this.#s.bind(this,r,o,e,n.QGType,a)),s.addEventListener("click",this.#d.bind(null,l)),s.addEventListener("blur",this.#l.bind(null,r,l)),r.setAttribute("draggable",!0),r.addEventListener("dragenter",(()=>{null!=this.#A&&this.#A!==t&&(n.moveQuest(this.#A,t),this.selectedQuestIndex=t,this.displayQuests(n),this.#A=t)})),r.addEventListener("dragend",(()=>{this.#A=null})),r.addEventListener("dragstart",(()=>{this.#A=t})),r}displayQuests(e){this.clearDisplayedQuests();const t=e.quests;let n=!1;const r=[];for(let o=0;o<t.length;o++){const i=this.#p(t[o],o,e);this.selectedQuestIndex===o&&(this.#c(t[o],i.querySelector("div.quest-select"),o),n=!0),t[o].isComplete?this.#r.append(i):this.#n.append(i),r.push(i)}n||this.#i.clearDisplayedTasks(),Te()}}class Pe{#h;#g;#m;clearDisplayedTasks(){this.#g.textContent="",this.#m.textContent=""}constructor(e,t,n){this.#h=e,this.#g=t,this.#m=n}#b(e,t){e.removeTask(t),this.displayTasks(e)}#v(e){const t=g("div.more-options:not(.hidden)",this.#h);t&&t!==e&&t.classList.add("hidden"),e.classList.toggle("hidden"),e.focus()}#l(e,t){e.querySelector(".more:hover")||t.classList.add("hidden")}#s(e,t,n){e.classList.add("hidden");const r=m("input.name-editor");r.setAttribute("type","text"),r.value=n.description,v(e,r),r.focus();const o=()=>{n.description=r.value,t.textContent=n.description,e.classList.remove("hidden"),Te(),r.remove()};r.addEventListener("focusout",o),r.addEventListener("keydown",(e=>{13===e.keyCode&&o()}))}#f(e,t){setTimeout((()=>{const n=t.children;if(n.length>0){for(let r=0;r<n.length;r++)if(n[r].dataset.index>e.dataset.index)return void t.insertBefore(e,n[r]);t.append(e)}else t.append(e)}),200)}#A=null;#C(e,t){const n=e.tasks[t],r=m("li");r.dataset.index=t;const o=m("label",r),i=m("span",o);i.textContent=n.description;const a=m("input",o);a.type="checkbox",m("span.checkbox",o),a.checked=n.isComplete;const s=m("button.more",r);s.append(Le());const d=m("div.more-options.hidden",s);d.setAttribute("tabindex",0),d.addEventListener("blur",this.#l.bind(this,r,d)),s.addEventListener("click",this.#v.bind(this,d));const l=m("button.delete-option",d);l.textContent="Delete",l.addEventListener("click",this.#b.bind(this,e,t));const u=m("button.edit-name-option",d);return u.textContent="Edit",u.addEventListener("click",this.#s.bind(this,r,i,n)),a.addEventListener("change",(()=>{let t,o=!1;a.checked?(n.complete(),t=this.#m,e.tasks.length===e.completedTasks.length&&(e.complete(),document.dispatchEvent(Se),o=!0)):(n.resetCompletion(),t=this.#g,e.isComplete&&(e.resetCompletion(),document.dispatchEvent(Se),o=!0)),o||this.#f(r,t),Te()})),r.setAttribute("draggable",!0),r.addEventListener("dragenter",(()=>{null!=this.#A&&this.#A!==t&&(e.moveTask(this.#A,t),this.displayTasks(e),this.#A=t)})),r.addEventListener("dragstart",(()=>{this.#A=t})),r.addEventListener("dragend",(()=>{this.#A=null,Te()})),r}displayTasks(e){this.clearDisplayedTasks();for(let t=0;t<e.tasks.length;t++){const n=this.#C(e,t);e.tasks[t].isComplete?this.#m.append(n):this.#g.append(n)}}}function Ue(e,t){var n,r,o,i,a,s,d,l;C(1,arguments);var u=w(),c=k(null!==(n=null!==(r=null!==(o=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(a=t.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=y(e),p=A.getDay(),h=(p<c?7:0)+p-c;return A.setDate(A.getDate()-h),A.setHours(0,0,0,0),A}const We=window.localStorage;class Ye{questGroups;constructor(e,t,n){this.questGroups={stat:new Be(e),daily:new xe(t),weekly:new Ie(n)}}}const Oe=new Date,Ge=g("body"),ze=Ge.querySelector("section.left"),Ne=Ge.querySelector("section.right"),je=Ge.querySelector("nav"),Fe=function(){const e={};let t;if(!We.getItem("user"))return new Ye;t=JSON.parse(We.getItem("user"));for(const[n,r]of Object.entries(t)){const t=[];for(let e=0;e<r.length;e++){const n=r[e],o=[];for(let e=0;e<n.tasks.length;e++){const t=n.tasks[e],r=t.completionDate?new Date(parseInt(t.completionDate)):null,i=new be(t.description,t.isOptional,r);o.push(i)}const i=n.dueDate?new Date(parseInt(n.dueDate)):null,a=n.completionDate?new Date(parseInt(n.completionDate)):null,s=new ve(n.name,o,i,a);t.push(s)}e[n]=t}return new Ye(e.stat,e.daily,e.weekly)}();let He=We.getItem("last-save-date");He=He?new Date(parseInt(He)):null,function(e,t,n){C(2,arguments);var r=Ue(e,n),o=Ue(t,n);return r.getTime()===o.getTime()}(Oe,He)||Fe.questGroups.weekly.resetQuests(),function(e,t){C(2,arguments);var n=Ae(e),r=Ae(t);return n.getTime()===r.getTime()}(Oe,He)||Fe.questGroups.daily.resetQuests(),new class{#y;#k;#B;#i;#x;#I;#w={stat:null,daily:null,weekly:null};#q;#E;#D;#o;#T;#Q;#L;#S;#M;#P;constructor(e,t,n,r){De=e,this.#U(n),this.#W(n),this.#Y(r),this.#O(t),document.addEventListener("quest completion changed",(()=>{this.#x.displayQuests(this.#k)}))}#O(e){this.#I=e,this.#w.stat=m("button.static-quests",this.#I),this.#w.stat.setAttribute("type","button"),this.#w.stat.textContent="Static",this.#w.daily=m("button.daily-quests",this.#I),this.#w.daily.setAttribute("type","button"),this.#w.daily.textContent="Daily",this.#w.weekly=m("button.weekly-quests",this.#I),this.#w.weekly.setAttribute("type","button"),this.#w.weekly.textContent="Weekly",this.#G()}#z(){this.#M.textContent=this.#B.getLabelText(),this.#M.append(this.#B.getDueInput())}displayQuestGroup(e){const t=this.#w[e],n=De.questGroups[e];n!==this.#k&&g(".selected",this.#I)?.classList.remove("selected"),this.#i.clearDisplayedTasks(),this.#k=n,this.#B=Qe[this.#k.QGType],t.classList.add("selected"),this.#z(),this.#x.displayQuests(n)}#G(){for(const[e,t]of Object.entries(this.#w))t.addEventListener("click",this.displayQuestGroup.bind(this,e))}#N(){if(null!=this.#x.selectedQuestIndex){const e=m("form#task-adder-form",g("ul.tasks"));e.setAttribute("novalidate",!0),e.setAttribute("onsubmit","return false");const t=m("input#create-new-task",e);t.setAttribute("placeholder","New task"),t.setAttribute("type","text"),t.addEventListener("focusout",(()=>{e.remove()}));const n=m("button",e);n.textContent="submit";const r=()=>{const e=new be(t.value,!1);this.#k.quests[this.#x.selectedQuestIndex].addTask(e),t.blur(),this.#x.displayQuests(this.#k)};n.addEventListener("pointerdown",r),t.addEventListener("keyup",(e=>{13===e.keyCode&&r()})),t.focus()}}#U(e){this.#q=m("div.actions-container",e),this.#E=m("button.task-adder",this.#q),this.#E.textContent="Add task +",this.#E.addEventListener("click",this.#N.bind(this)),this.#D=m("button.quest-ender",this.#q),this.#D.textContent="End quest ×"}#j(){this.classList.toggle("selected"),g(".quest-prompt").classList.toggle("activated")}#Y(e){const t=m("div.quest-container",e),n=m("ul.quests",t),r=m("ul.completed.quests",t);this.#o=m("button.quest-adder",e),this.#o.textContent="+",this.#o.addEventListener("click",this.#j),this.#x=new Me(t,n,r,this.#o,this.#i),this.#F(t)}#F(e){this.#T=m("div.quest-prompt"),e.prepend(this.#T),m("div.quest-prompt-top",this.#T),this.#Q=m("form.quest-prompt-body",this.#T),this.#Q.setAttribute("onsubmit","return false"),this.#Q.setAttribute("action","#"),this.#Q.setAttribute("method","post"),this.#L=m("label",this.#Q),this.#L.setAttribute("for","get-quest-name"),this.#L.textContent="Quest name: ",this.#S=m("input.get-quest-name",this.#L),this.#S.setAttribute("type","text"),this.#S.setAttribute("placeholder","Name here"),this.#M=m("label",this.#Q),this.#M.setAttribute("for","get-quest-due"),this.#M.textContent="Due: ",this.#P=m("button#submit-quest",this.#Q),this.#P.setAttribute("type","submit"),this.#P.textContent="Ok",this.#P.addEventListener("click",(()=>{const[e,t]=this.#B.getInputVals();if(null!=e){let n;this.#o.classList.toggle("selected"),this.#T.classList.toggle("activated"),n=t?this.#k.makeQuest(e,[],t):this.#k.makeQuest(e,[]),this.#x.displayQuests(this.#k)}})),m("div.quest-prompt-low",this.#T)}#W(e){const t=m("div.tasks-container",e),n=m("ul.tasks",t),r=m("ul.completed.tasks",t);this.#i=new Pe(t,n,r)}}(Fe,je,Ne,ze).displayQuestGroup("stat")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,